# Function to check if session is remote or local
function is_remote() {
  [[ -n $SSH_CLIENT || -n $SSH_TTY || -n $SSH_CONNECTION ]] && return 0 || return 1
}

DEFAULT_USER="anand"

function user_host_info() {
  if [[ "$USER" == "$DEFAULT_USER" ]]; then
    # Just show hostname if logged in as self
    echo "%F{$PROMPT_COLOR}%m%f"
  else
    # Otherwise user@host 
    echo "%F{$PROMPT_COLOR}%n@%m%f"
  fi
}

# Git status
function git_prompt_info() {
  local ref dirty
  if git rev-parse --is-inside-work-tree >/dev/null 2>&1; then
    ref=$(git symbolic-ref HEAD 2> /dev/null) || ref="âž¦ $(git rev-parse --short HEAD 2> /dev/null)"
    dirty=$(git status --porcelain 2> /dev/null | wc -l)
    if [[ $dirty -gt 0 ]]; then
      echo " %F{red}${ref#refs/heads/}*%f"
    else
      echo " %F{cyan}${ref#refs/heads/}%f"
    fi
  fi
}

# Python venv
function python_env() {
  if [[ -n $VIRTUAL_ENV ]]; then
    echo " %F{blue}($(basename $VIRTUAL_ENV))%f"
  elif [[ -n $CONDA_DEFAULT_ENV && $CONDA_DEFAULT_ENV != "base" ]]; then
    echo " %F{blue}($CONDA_DEFAULT_ENV)%f"
  fi
}

# Last command status
function check_last_exit_code() {
  local LAST_EXIT_CODE=$?
  if [[ $LAST_EXIT_CODE -ne 0 ]]; then
    echo "%F{red}%#%f"
  else
    echo "%F{white}%#%f"
  fi
}

# Set prompt color based on connection type
if is_remote; then
  PROMPT_COLOR='magenta'
else
  PROMPT_COLOR='cyan'
fi

setopt PROMPT_SUBST
PROMPT='$(user_host_info):%1~$(git_prompt_info)$(python_env) $(check_last_exit_code) '